// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Get.
    /// </summary>
    public static partial class GetExtensions
    {
            /// <summary>
            /// Gets account state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountId'>
            /// </param>
            public static PathsapiV0AccountAccountIdgetresponses200contentapplicationJsonschema Account(this IGet operations, string accountId)
            {
                return operations.AccountAsync(accountId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets account state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PathsapiV0AccountAccountIdgetresponses200contentapplicationJsonschema> AccountAsync(this IGet operations, string accountId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AccountWithHttpMessagesAsync(accountId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockId'>
            /// </param>
            public static string Block(this IGet operations, string blockId)
            {
                return operations.BlockAsync(blockId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> BlockAsync(this IGet operations, string blockId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BlockWithHttpMessagesAsync(blockId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets IDs of descendants of block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockId'>
            /// </param>
            /// <param name='count'>
            /// </param>
            public static string Next(this IGet operations, string blockId, int? count = 1)
            {
                return operations.NextAsync(blockId, count).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets IDs of descendants of block
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='blockId'>
            /// </param>
            /// <param name='count'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> NextAsync(this IGet operations, string blockId, int? count = 1, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NextWithHttpMessagesAsync(blockId, count, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get system diagnostic information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PathsapiV0Diagnosticgetresponses200contentapplicationJsonschema Diagnostic(this IGet operations)
            {
                return operations.DiagnosticAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get system diagnostic information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PathsapiV0Diagnosticgetresponses200contentapplicationJsonschema> DiagnosticAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiagnosticWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets logs from node message pool
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Get200ApplicationJsonItemsItem> Logs(this IGet operations)
            {
                return operations.LogsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets logs from node message pool
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Get200ApplicationJsonItemsItem>> LogsAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets leader IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<int?> Leaders(this IGet operations)
            {
                return operations.LeadersAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets leader IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<int?>> LeadersAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LeadersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets leader logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitems> Logs1(this IGet operations)
            {
                return operations.Logs1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets leader logs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitems>> Logs1Async(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Logs1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetches network stats
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<PathsapiV0NetworkStatsgetresponses200contentapplicationJsonschemaitems> Stats(this IGet operations)
            {
                return operations.StatsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetches network stats
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PathsapiV0NetworkStatsgetresponses200contentapplicationJsonschemaitems>> StatsAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StatsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetches node stats
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PathsapiV0NodeStatsgetresponses200contentapplicationJsonschema Stats1(this IGet operations)
            {
                return operations.Stats1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetches node stats
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PathsapiV0NodeStatsgetresponses200contentapplicationJsonschema> Stats1Async(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Stats1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets node settings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PathsapiV0Settingsgetresponses200contentapplicationJsonschema Settings(this IGet operations)
            {
                return operations.SettingsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets node settings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PathsapiV0Settingsgetresponses200contentapplicationJsonschema> SettingsAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets stake pool IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> Pools(this IGet operations)
            {
                return operations.PoolsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets stake pool IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> PoolsAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PoolsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets stake pool details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// </param>
            public static PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschema Pool(this IGet operations, string poolId)
            {
                return operations.PoolAsync(poolId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets stake pool details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='poolId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschema> PoolAsync(this IGet operations, string poolId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PoolWithHttpMessagesAsync(poolId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets stake distribution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PathsapiV0Stakegetresponses200contentapplicationJsonschema Distribution(this IGet operations)
            {
                return operations.DistributionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets stake distribution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PathsapiV0Stakegetresponses200contentapplicationJsonschema> DistributionAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DistributionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets ID of the blockchain tip
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string Tip(this IGet operations)
            {
                return operations.TipAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets ID of the blockchain tip
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> TipAsync(this IGet operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TipWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
