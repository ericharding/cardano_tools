// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Get200ApplicationJsonItemsItem
    {
        /// <summary>
        /// Initializes a new instance of the Get200ApplicationJsonItemsItem
        /// class.
        /// </summary>
        public Get200ApplicationJsonItemsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Get200ApplicationJsonItemsItem
        /// class.
        /// </summary>
        /// <param name="fragmentId">Hex-encoded fragment ID</param>
        /// <param name="receivedFrom">Source of the fragment. Possible values
        /// include: 'Network', 'Rest'</param>
        /// <param name="receivedAt">When fragment was received by node</param>
        /// <param name="lastUpdatedAt">When fragment changed status last
        /// time</param>
        /// <param name="status">Status of the fragment</param>
        public Get200ApplicationJsonItemsItem(string fragmentId, string receivedFrom, System.DateTime receivedAt, System.DateTime lastUpdatedAt, object status)
        {
            FragmentId = fragmentId;
            ReceivedFrom = receivedFrom;
            ReceivedAt = receivedAt;
            LastUpdatedAt = lastUpdatedAt;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets hex-encoded fragment ID
        /// </summary>
        [JsonProperty(PropertyName = "fragment_id")]
        public string FragmentId { get; set; }

        /// <summary>
        /// Gets or sets source of the fragment. Possible values include:
        /// 'Network', 'Rest'
        /// </summary>
        [JsonProperty(PropertyName = "received_from")]
        public string ReceivedFrom { get; set; }

        /// <summary>
        /// Gets or sets when fragment was received by node
        /// </summary>
        [JsonProperty(PropertyName = "received_at")]
        public System.DateTime ReceivedAt { get; set; }

        /// <summary>
        /// Gets or sets when fragment changed status last time
        /// </summary>
        [JsonProperty(PropertyName = "last_updated_at")]
        public System.DateTime LastUpdatedAt { get; set; }

        /// <summary>
        /// Gets or sets status of the fragment
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public object Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FragmentId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FragmentId");
            }
            if (ReceivedFrom == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReceivedFrom");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
        }
    }
}
