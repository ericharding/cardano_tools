// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// the reward received by the stake pool during the associated epoch
    /// </summary>
    public partial class PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiesrewards
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiesrewards
        /// class.
        /// </summary>
        public PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiesrewards()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiesrewards
        /// class.
        /// </summary>
        /// <param name="epoch">the epoch the reward has been distributed to
        /// this stake pool for the last time</param>
        /// <param name="valueTaxed">the total value taxed for the stake
        /// pool</param>
        /// <param name="valueForStakers">the value remaining to distribute
        /// amongst the delegators to this stake pool</param>
        public PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiesrewards(int? epoch = default(int?), int? valueTaxed = default(int?), int? valueForStakers = default(int?))
        {
            Epoch = epoch;
            ValueTaxed = valueTaxed;
            ValueForStakers = valueForStakers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the epoch the reward has been distributed to this
        /// stake pool for the last time
        /// </summary>
        [JsonProperty(PropertyName = "epoch")]
        public int? Epoch { get; set; }

        /// <summary>
        /// Gets or sets the total value taxed for the stake pool
        /// </summary>
        [JsonProperty(PropertyName = "value_taxed")]
        public int? ValueTaxed { get; set; }

        /// <summary>
        /// Gets or sets the value remaining to distribute amongst the
        /// delegators to this stake pool
        /// </summary>
        [JsonProperty(PropertyName = "value_for_stakers")]
        public int? ValueForStakers { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Epoch < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Epoch", 0);
            }
            if (ValueTaxed < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ValueTaxed", 0);
            }
            if (ValueForStakers < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ValueForStakers", 0);
            }
        }
    }
}
