// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PathsapiV0Settingsgetresponses200contentapplicationJsonschema
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0Settingsgetresponses200contentapplicationJsonschema
        /// class.
        /// </summary>
        public PathsapiV0Settingsgetresponses200contentapplicationJsonschema()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0Settingsgetresponses200contentapplicationJsonschema
        /// class.
        /// </summary>
        /// <param name="block0Hash">Hex-encoded hash of block0</param>
        /// <param name="block0Time">When block0 was created</param>
        /// <param name="blockContentMaxSize">The block content's max size in
        /// bytes</param>
        /// <param name="consensusVersion">Version of consensus, which is
        /// currently used. Possible values include: 'bft', 'genesis'</param>
        /// <param name="epochStabilityDepth">The depth, number of blocks, to
        /// which we consider the blockchain to be stable and prevent rollback
        /// beyond that depth</param>
        /// <param name="fees">Linear fees configuration</param>
        /// <param name="rewardParams">Parameters for rewards
        /// calculation</param>
        /// <param name="slotDuration">Slot duration in seconds</param>
        /// <param name="slotsPerEpoch">Number of slots per epoch</param>
        /// <param name="treasuryTax">Tax from reward that goes to pot</param>
        /// <param name="currSlotStartTime">When current slot was opened, not
        /// set if none is currently open</param>
        public PathsapiV0Settingsgetresponses200contentapplicationJsonschema(string block0Hash, System.DateTime block0Time, int blockContentMaxSize, string consensusVersion, int epochStabilityDepth, PathsapiV0Settingsgetresponses200contentapplicationJsonschemapropertiesfees fees, PathsapiV0Settingsgetresponses200contentapplicationJsonschemapropertiesrewardparams rewardParams, int slotDuration, int slotsPerEpoch, PathsapiV0Settingsgetresponses200contentapplicationJsonschemapropertiestreasurytax treasuryTax, System.DateTime? currSlotStartTime = default(System.DateTime?))
        {
            Block0Hash = block0Hash;
            Block0Time = block0Time;
            BlockContentMaxSize = blockContentMaxSize;
            ConsensusVersion = consensusVersion;
            CurrSlotStartTime = currSlotStartTime;
            EpochStabilityDepth = epochStabilityDepth;
            Fees = fees;
            RewardParams = rewardParams;
            SlotDuration = slotDuration;
            SlotsPerEpoch = slotsPerEpoch;
            TreasuryTax = treasuryTax;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets hex-encoded hash of block0
        /// </summary>
        [JsonProperty(PropertyName = "block0Hash")]
        public string Block0Hash { get; set; }

        /// <summary>
        /// Gets or sets when block0 was created
        /// </summary>
        [JsonProperty(PropertyName = "block0Time")]
        public System.DateTime Block0Time { get; set; }

        /// <summary>
        /// Gets or sets the block content's max size in bytes
        /// </summary>
        [JsonProperty(PropertyName = "blockContentMaxSize")]
        public int BlockContentMaxSize { get; set; }

        /// <summary>
        /// Gets or sets version of consensus, which is currently used.
        /// Possible values include: 'bft', 'genesis'
        /// </summary>
        [JsonProperty(PropertyName = "consensusVersion")]
        public string ConsensusVersion { get; set; }

        /// <summary>
        /// Gets or sets when current slot was opened, not set if none is
        /// currently open
        /// </summary>
        [JsonProperty(PropertyName = "currSlotStartTime")]
        public System.DateTime? CurrSlotStartTime { get; set; }

        /// <summary>
        /// Gets or sets the depth, number of blocks, to which we consider the
        /// blockchain to be stable and prevent rollback beyond that depth
        /// </summary>
        [JsonProperty(PropertyName = "epochStabilityDepth")]
        public int EpochStabilityDepth { get; set; }

        /// <summary>
        /// Gets or sets linear fees configuration
        /// </summary>
        [JsonProperty(PropertyName = "fees")]
        public PathsapiV0Settingsgetresponses200contentapplicationJsonschemapropertiesfees Fees { get; set; }

        /// <summary>
        /// Gets or sets parameters for rewards calculation
        /// </summary>
        [JsonProperty(PropertyName = "rewardParams")]
        public PathsapiV0Settingsgetresponses200contentapplicationJsonschemapropertiesrewardparams RewardParams { get; set; }

        /// <summary>
        /// Gets or sets slot duration in seconds
        /// </summary>
        [JsonProperty(PropertyName = "slotDuration")]
        public int SlotDuration { get; set; }

        /// <summary>
        /// Gets or sets number of slots per epoch
        /// </summary>
        [JsonProperty(PropertyName = "slotsPerEpoch")]
        public int SlotsPerEpoch { get; set; }

        /// <summary>
        /// Gets or sets tax from reward that goes to pot
        /// </summary>
        [JsonProperty(PropertyName = "treasuryTax")]
        public PathsapiV0Settingsgetresponses200contentapplicationJsonschemapropertiestreasurytax TreasuryTax { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Block0Hash == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Block0Hash");
            }
            if (ConsensusVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConsensusVersion");
            }
            if (Fees == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fees");
            }
            if (RewardParams == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RewardParams");
            }
            if (TreasuryTax == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TreasuryTax");
            }
            if (BlockContentMaxSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "BlockContentMaxSize", 1);
            }
            if (EpochStabilityDepth < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "EpochStabilityDepth", 1);
            }
            if (Fees != null)
            {
                Fees.Validate();
            }
            if (RewardParams != null)
            {
                RewardParams.Validate();
            }
            if (SlotDuration < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "SlotDuration", 0);
            }
            if (SlotsPerEpoch < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "SlotsPerEpoch", 0);
            }
            if (TreasuryTax != null)
            {
                TreasuryTax.Validate();
            }
        }
    }
}
