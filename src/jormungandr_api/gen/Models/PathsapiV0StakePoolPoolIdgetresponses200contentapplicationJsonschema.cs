// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Stake pool details
    /// </summary>
    public partial class PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschema
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschema
        /// class.
        /// </summary>
        public PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschema()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschema
        /// class.
        /// </summary>
        /// <param name="tax">Pool reward</param>
        /// <param name="totalStake">Total stake pool value</param>
        /// <param name="kesPublicKey">Bech32-encoded stake pool KES
        /// key</param>
        /// <param name="vrfPublicKey">Bech32-encoded stake pool VRF
        /// key</param>
        /// <param name="rewards">the reward received by the stake pool during
        /// the associated epoch</param>
        public PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschema(PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiestax tax, int totalStake, string kesPublicKey, string vrfPublicKey, PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiesrewards rewards = default(PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiesrewards))
        {
            Tax = tax;
            TotalStake = totalStake;
            Rewards = rewards;
            KesPublicKey = kesPublicKey;
            VrfPublicKey = vrfPublicKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets pool reward
        /// </summary>
        [JsonProperty(PropertyName = "tax")]
        public PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiestax Tax { get; set; }

        /// <summary>
        /// Gets or sets total stake pool value
        /// </summary>
        [JsonProperty(PropertyName = "total_stake")]
        public int TotalStake { get; set; }

        /// <summary>
        /// Gets or sets the reward received by the stake pool during the
        /// associated epoch
        /// </summary>
        [JsonProperty(PropertyName = "rewards")]
        public PathsapiV0StakePoolPoolIdgetresponses200contentapplicationJsonschemapropertiesrewards Rewards { get; set; }

        /// <summary>
        /// Gets or sets bech32-encoded stake pool KES key
        /// </summary>
        [JsonProperty(PropertyName = "kesPublicKey")]
        public string KesPublicKey { get; set; }

        /// <summary>
        /// Gets or sets bech32-encoded stake pool VRF key
        /// </summary>
        [JsonProperty(PropertyName = "vrfPublicKey")]
        public string VrfPublicKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Tax == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Tax");
            }
            if (KesPublicKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KesPublicKey");
            }
            if (VrfPublicKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VrfPublicKey");
            }
            if (Tax != null)
            {
                Tax.Validate();
            }
            if (TotalStake < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TotalStake", 0);
            }
            if (Rewards != null)
            {
                Rewards.Validate();
            }
        }
    }
}
