// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// UTXOs details
    /// </summary>
    public partial class PathsapiV0UtxoFragmentIdOutputIndexgetresponses200contentapplicationJsonschema
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0UtxoFragmentIdOutputIndexgetresponses200contentapplicationJsonschema
        /// class.
        /// </summary>
        public PathsapiV0UtxoFragmentIdOutputIndexgetresponses200contentapplicationJsonschema()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0UtxoFragmentIdOutputIndexgetresponses200contentapplicationJsonschema
        /// class.
        /// </summary>
        /// <param name="address">Bech32-encoded address of owner of
        /// UTXO</param>
        /// <param name="value">Amount that is held in this UTXO</param>
        public PathsapiV0UtxoFragmentIdOutputIndexgetresponses200contentapplicationJsonschema(string address, int value)
        {
            Address = address;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets bech32-encoded address of owner of UTXO
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets amount that is held in this UTXO
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public int Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Address == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Address");
            }
            if (Value < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Value", 0);
            }
        }
    }
}
