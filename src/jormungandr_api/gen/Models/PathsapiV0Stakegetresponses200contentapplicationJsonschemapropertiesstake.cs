// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Stake state, present only if there is leadership and it works with
    /// Genesis Praos consensus
    /// </summary>
    public partial class PathsapiV0Stakegetresponses200contentapplicationJsonschemapropertiesstake
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0Stakegetresponses200contentapplicationJsonschemapropertiesstake
        /// class.
        /// </summary>
        public PathsapiV0Stakegetresponses200contentapplicationJsonschemapropertiesstake()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0Stakegetresponses200contentapplicationJsonschemapropertiesstake
        /// class.
        /// </summary>
        /// <param name="dangling">Total value stored in accounts, but assigned
        /// to nonexistent pools</param>
        /// <param name="pools">All valid assignments of value stored in
        /// accounts to pools</param>
        /// <param name="unassigned">Total value stored in accounts, but not
        /// assigned to any pool</param>
        public PathsapiV0Stakegetresponses200contentapplicationJsonschemapropertiesstake(int dangling, IList<IList<object>> pools, int unassigned)
        {
            Dangling = dangling;
            Pools = pools;
            Unassigned = unassigned;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets total value stored in accounts, but assigned to
        /// nonexistent pools
        /// </summary>
        [JsonProperty(PropertyName = "dangling")]
        public int Dangling { get; set; }

        /// <summary>
        /// Gets or sets all valid assignments of value stored in accounts to
        /// pools
        /// </summary>
        [JsonProperty(PropertyName = "pools")]
        public IList<IList<object>> Pools { get; set; }

        /// <summary>
        /// Gets or sets total value stored in accounts, but not assigned to
        /// any pool
        /// </summary>
        [JsonProperty(PropertyName = "unassigned")]
        public int Unassigned { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Pools == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Pools");
            }
            if (Dangling < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Dangling", 0);
            }
            if (Unassigned < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Unassigned", 0);
            }
        }
    }
}
