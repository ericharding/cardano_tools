// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Node stats
    /// </summary>
    public partial class PathsapiV0NetworkStatsgetresponses200contentapplicationJsonschemaitems
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0NetworkStatsgetresponses200contentapplicationJsonschemaitems
        /// class.
        /// </summary>
        public PathsapiV0NetworkStatsgetresponses200contentapplicationJsonschemaitems()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0NetworkStatsgetresponses200contentapplicationJsonschemaitems
        /// class.
        /// </summary>
        /// <param name="addr">Node address</param>
        /// <param name="nodeId">Hex-encoded node ID</param>
        /// <param name="establishedAt">Timestamp from when the connection was
        /// established at</param>
        /// <param name="lastBlockReceived">Timestamp of last time block was
        /// received from node if ever</param>
        /// <param name="lastFragmentReceived">Timestamp of last time fragment
        /// was received from node if ever</param>
        /// <param name="lastGossipReceived">Timestamp of last time gossip was
        /// received from node if ever</param>
        public PathsapiV0NetworkStatsgetresponses200contentapplicationJsonschemaitems(string addr, string nodeId, System.DateTime establishedAt, System.DateTime? lastBlockReceived = default(System.DateTime?), System.DateTime? lastFragmentReceived = default(System.DateTime?), System.DateTime? lastGossipReceived = default(System.DateTime?))
        {
            Addr = addr;
            NodeId = nodeId;
            EstablishedAt = establishedAt;
            LastBlockReceived = lastBlockReceived;
            LastFragmentReceived = lastFragmentReceived;
            LastGossipReceived = lastGossipReceived;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets node address
        /// </summary>
        [JsonProperty(PropertyName = "addr")]
        public string Addr { get; set; }

        /// <summary>
        /// Gets or sets hex-encoded node ID
        /// </summary>
        [JsonProperty(PropertyName = "nodeId")]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or sets timestamp from when the connection was established at
        /// </summary>
        [JsonProperty(PropertyName = "establishedAt")]
        public System.DateTime EstablishedAt { get; set; }

        /// <summary>
        /// Gets or sets timestamp of last time block was received from node if
        /// ever
        /// </summary>
        [JsonProperty(PropertyName = "lastBlockReceived")]
        public System.DateTime? LastBlockReceived { get; set; }

        /// <summary>
        /// Gets or sets timestamp of last time fragment was received from node
        /// if ever
        /// </summary>
        [JsonProperty(PropertyName = "lastFragmentReceived")]
        public System.DateTime? LastFragmentReceived { get; set; }

        /// <summary>
        /// Gets or sets timestamp of last time gossip was received from node
        /// if ever
        /// </summary>
        [JsonProperty(PropertyName = "lastGossipReceived")]
        public System.DateTime? LastGossipReceived { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Addr == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Addr");
            }
            if (NodeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeId");
            }
        }
    }
}
