// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// the last rewards
    /// </summary>
    public partial class PathsapiV0AccountAccountIdgetresponses200contentapplicationJsonschemapropertieslastRewards
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0AccountAccountIdgetresponses200contentapplicationJsonschemapropertieslastRewards
        /// class.
        /// </summary>
        public PathsapiV0AccountAccountIdgetresponses200contentapplicationJsonschemapropertieslastRewards()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0AccountAccountIdgetresponses200contentapplicationJsonschemapropertieslastRewards
        /// class.
        /// </summary>
        /// <param name="epoch">the last epoch that distributed rewards to this
        /// account</param>
        /// <param name="reward">the total amount of rewards received for the
        /// associated epoch</param>
        public PathsapiV0AccountAccountIdgetresponses200contentapplicationJsonschemapropertieslastRewards(int? epoch = default(int?), int? reward = default(int?))
        {
            Epoch = epoch;
            Reward = reward;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the last epoch that distributed rewards to this
        /// account
        /// </summary>
        [JsonProperty(PropertyName = "epoch")]
        public int? Epoch { get; set; }

        /// <summary>
        /// Gets or sets the total amount of rewards received for the
        /// associated epoch
        /// </summary>
        [JsonProperty(PropertyName = "reward")]
        public int? Reward { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Epoch < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Epoch", 0);
            }
            if (Reward < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Reward", 0);
            }
        }
    }
}
