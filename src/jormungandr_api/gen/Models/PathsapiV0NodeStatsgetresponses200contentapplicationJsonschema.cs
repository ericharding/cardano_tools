// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PathsapiV0NodeStatsgetresponses200contentapplicationJsonschema
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0NodeStatsgetresponses200contentapplicationJsonschema
        /// class.
        /// </summary>
        public PathsapiV0NodeStatsgetresponses200contentapplicationJsonschema()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0NodeStatsgetresponses200contentapplicationJsonschema
        /// class.
        /// </summary>
        /// <param name="blockRecvCnt">Number of blocks received by
        /// node</param>
        /// <param name="lastReceivedBlockTime">The time at which we received
        /// the last block, not necessarily the current tip block</param>
        /// <param name="lastBlockContentSize">Size in bytes of all
        /// transactions in last block</param>
        /// <param name="lastBlockFees">Sum of all fee values in all
        /// transactions in last block</param>
        /// <param name="lastBlockSum">Sum of all input values in all
        /// transactions in last block</param>
        /// <param name="lastBlockTx">Number of transactions in last
        /// block</param>
        /// <param name="state">State of the node. Possible values include:
        /// 'StartingRestServer', 'PreparingStorage', 'PreparingBlock0',
        /// 'Bootstrapping', 'StartingWorkers', 'Running'</param>
        /// <param name="txRecvCnt">Number of transactions received by
        /// node</param>
        /// <param name="uptime">Node uptime in seconds</param>
        /// <param name="version">Node app version</param>
        /// <param name="lastBlockDate">The Epoch and slot Number of the
        /// block</param>
        /// <param name="lastBlockHash">The block hash, it's unique identifier
        /// in the blockchain</param>
        /// <param name="lastBlockHeight">The block number, in order, since the
        /// block0</param>
        /// <param name="lastBlockTime">The slot time of the block</param>
        public PathsapiV0NodeStatsgetresponses200contentapplicationJsonschema(int blockRecvCnt, System.DateTime lastReceivedBlockTime, int lastBlockContentSize, int lastBlockFees, int lastBlockSum, int lastBlockTx, string state, int txRecvCnt, int uptime, string version, string lastBlockDate = default(string), string lastBlockHash = default(string), double? lastBlockHeight = default(double?), System.DateTime? lastBlockTime = default(System.DateTime?))
        {
            BlockRecvCnt = blockRecvCnt;
            LastReceivedBlockTime = lastReceivedBlockTime;
            LastBlockContentSize = lastBlockContentSize;
            LastBlockDate = lastBlockDate;
            LastBlockFees = lastBlockFees;
            LastBlockHash = lastBlockHash;
            LastBlockHeight = lastBlockHeight;
            LastBlockSum = lastBlockSum;
            LastBlockTime = lastBlockTime;
            LastBlockTx = lastBlockTx;
            State = state;
            TxRecvCnt = txRecvCnt;
            Uptime = uptime;
            Version = version;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets number of blocks received by node
        /// </summary>
        [JsonProperty(PropertyName = "blockRecvCnt")]
        public int BlockRecvCnt { get; set; }

        /// <summary>
        /// Gets or sets the time at which we received the last block, not
        /// necessarily the current tip block
        /// </summary>
        [JsonProperty(PropertyName = "lastReceivedBlockTime")]
        public System.DateTime LastReceivedBlockTime { get; set; }

        /// <summary>
        /// Gets or sets size in bytes of all transactions in last block
        /// </summary>
        [JsonProperty(PropertyName = "lastBlockContentSize")]
        public int LastBlockContentSize { get; set; }

        /// <summary>
        /// Gets or sets the Epoch and slot Number of the block
        /// </summary>
        [JsonProperty(PropertyName = "lastBlockDate")]
        public string LastBlockDate { get; set; }

        /// <summary>
        /// Gets or sets sum of all fee values in all transactions in last
        /// block
        /// </summary>
        [JsonProperty(PropertyName = "lastBlockFees")]
        public int LastBlockFees { get; set; }

        /// <summary>
        /// Gets or sets the block hash, it's unique identifier in the
        /// blockchain
        /// </summary>
        [JsonProperty(PropertyName = "lastBlockHash")]
        public string LastBlockHash { get; set; }

        /// <summary>
        /// Gets or sets the block number, in order, since the block0
        /// </summary>
        [JsonProperty(PropertyName = "lastBlockHeight")]
        public double? LastBlockHeight { get; set; }

        /// <summary>
        /// Gets or sets sum of all input values in all transactions in last
        /// block
        /// </summary>
        [JsonProperty(PropertyName = "lastBlockSum")]
        public int LastBlockSum { get; set; }

        /// <summary>
        /// Gets or sets the slot time of the block
        /// </summary>
        [JsonProperty(PropertyName = "lastBlockTime")]
        public System.DateTime? LastBlockTime { get; set; }

        /// <summary>
        /// Gets or sets number of transactions in last block
        /// </summary>
        [JsonProperty(PropertyName = "lastBlockTx")]
        public int LastBlockTx { get; set; }

        /// <summary>
        /// Gets or sets state of the node. Possible values include:
        /// 'StartingRestServer', 'PreparingStorage', 'PreparingBlock0',
        /// 'Bootstrapping', 'StartingWorkers', 'Running'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets number of transactions received by node
        /// </summary>
        [JsonProperty(PropertyName = "txRecvCnt")]
        public int TxRecvCnt { get; set; }

        /// <summary>
        /// Gets or sets node uptime in seconds
        /// </summary>
        [JsonProperty(PropertyName = "uptime")]
        public int Uptime { get; set; }

        /// <summary>
        /// Gets or sets node app version
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (State == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "State");
            }
            if (Version == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Version");
            }
            if (BlockRecvCnt < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "BlockRecvCnt", 0);
            }
            if (LastBlockContentSize < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "LastBlockContentSize", 0);
            }
            if (LastBlockFees < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "LastBlockFees", 0);
            }
            if (LastBlockSum < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "LastBlockSum", 0);
            }
            if (LastBlockTx < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "LastBlockTx", 0);
            }
            if (TxRecvCnt < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TxRecvCnt", 0);
            }
            if (Uptime < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Uptime", 0);
            }
        }
    }
}
