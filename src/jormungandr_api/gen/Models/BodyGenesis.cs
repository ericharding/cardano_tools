// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Secret key for genesis node
    /// </summary>
    public partial class BodyGenesis
    {
        /// <summary>
        /// Initializes a new instance of the BodyGenesis class.
        /// </summary>
        public BodyGenesis()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BodyGenesis class.
        /// </summary>
        /// <param name="nodeId">Hex-encoded node ID</param>
        /// <param name="sigKey">Bech32-encoded KES signing key</param>
        /// <param name="vrfKey">Bech32-encoded VRF signing key</param>
        public BodyGenesis(string nodeId, string sigKey, string vrfKey)
        {
            NodeId = nodeId;
            SigKey = sigKey;
            VrfKey = vrfKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets hex-encoded node ID
        /// </summary>
        [JsonProperty(PropertyName = "node_id")]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or sets bech32-encoded KES signing key
        /// </summary>
        [JsonProperty(PropertyName = "sig_key")]
        public string SigKey { get; set; }

        /// <summary>
        /// Gets or sets bech32-encoded VRF signing key
        /// </summary>
        [JsonProperty(PropertyName = "vrf_key")]
        public string VrfKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NodeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeId");
            }
            if (SigKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SigKey");
            }
            if (VrfKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VrfKey");
            }
            if (NodeId != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(NodeId, "[0-9a-fA-F]+"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "NodeId", "[0-9a-fA-F]+");
                }
            }
        }
    }
}
