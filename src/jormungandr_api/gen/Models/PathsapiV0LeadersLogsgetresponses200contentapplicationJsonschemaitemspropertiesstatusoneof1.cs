// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Event was rejected and won't be create a block
    /// </summary>
    public partial class PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitemspropertiesstatusoneof1
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitemspropertiesstatusoneof1
        /// class.
        /// </summary>
        public PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitemspropertiesstatusoneof1()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitemspropertiesstatusoneof1
        /// class.
        /// </summary>
        public PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitemspropertiesstatusoneof1(PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitemspropertiesstatusoneof1propertiesrejected rejected)
        {
            Rejected = rejected;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Rejected")]
        public PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitemspropertiesstatusoneof1propertiesrejected Rejected { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Rejected == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Rejected");
            }
            if (Rejected != null)
            {
                Rejected.Validate();
            }
        }
    }
}
