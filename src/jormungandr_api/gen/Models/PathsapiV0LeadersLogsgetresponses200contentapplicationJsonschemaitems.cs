// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Log entry
    /// </summary>
    public partial class PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitems
    {
        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitems
        /// class.
        /// </summary>
        public PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitems()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitems
        /// class.
        /// </summary>
        /// <param name="createdAtTime">Timestamp of when this log entry was
        /// created</param>
        /// <param name="scheduledAtTime">Timestamp of start of leadership
        /// according to schedule</param>
        /// <param name="scheduledAtDate">Epoch and slot ID of start of
        /// leadership according to schedule</param>
        /// <param name="enclaveLeaderId">ID of leadership event that produced
        /// this log entry</param>
        /// <param name="wakeAtTime">Timestamp of when leadership was
        /// started</param>
        /// <param name="finishedAtTime">Timestamp of when leadership was
        /// finished</param>
        /// <param name="status">Status of the leadership event</param>
        public PathsapiV0LeadersLogsgetresponses200contentapplicationJsonschemaitems(System.DateTime createdAtTime, System.DateTime scheduledAtTime, string scheduledAtDate, int enclaveLeaderId, System.DateTime? wakeAtTime = default(System.DateTime?), System.DateTime? finishedAtTime = default(System.DateTime?), object status = default(object))
        {
            CreatedAtTime = createdAtTime;
            ScheduledAtTime = scheduledAtTime;
            ScheduledAtDate = scheduledAtDate;
            WakeAtTime = wakeAtTime;
            FinishedAtTime = finishedAtTime;
            EnclaveLeaderId = enclaveLeaderId;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets timestamp of when this log entry was created
        /// </summary>
        [JsonProperty(PropertyName = "created_at_time")]
        public System.DateTime CreatedAtTime { get; set; }

        /// <summary>
        /// Gets or sets timestamp of start of leadership according to schedule
        /// </summary>
        [JsonProperty(PropertyName = "scheduled_at_time")]
        public System.DateTime ScheduledAtTime { get; set; }

        /// <summary>
        /// Gets or sets epoch and slot ID of start of leadership according to
        /// schedule
        /// </summary>
        [JsonProperty(PropertyName = "scheduled_at_date")]
        public string ScheduledAtDate { get; set; }

        /// <summary>
        /// Gets or sets timestamp of when leadership was started
        /// </summary>
        [JsonProperty(PropertyName = "wake_at_time")]
        public System.DateTime? WakeAtTime { get; set; }

        /// <summary>
        /// Gets or sets timestamp of when leadership was finished
        /// </summary>
        [JsonProperty(PropertyName = "finished_at_time")]
        public System.DateTime? FinishedAtTime { get; set; }

        /// <summary>
        /// Gets or sets ID of leadership event that produced this log entry
        /// </summary>
        [JsonProperty(PropertyName = "enclave_leader_id")]
        public int EnclaveLeaderId { get; set; }

        /// <summary>
        /// Gets or sets status of the leadership event
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public object Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ScheduledAtDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScheduledAtDate");
            }
            if (EnclaveLeaderId < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "EnclaveLeaderId", 0);
            }
        }
    }
}
