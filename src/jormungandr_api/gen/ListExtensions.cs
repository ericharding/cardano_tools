// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Jormungandr
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for List.
    /// </summary>
    public static partial class ListExtensions
    {
            /// <summary>
            /// list all the nodes that are connected to ours but that are not publicly
            /// reachable
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<PathsapiV0NetworkP2pNonPublicgetresponses200contentapplicationJsonschemaitems> Nodes(this IList operations)
            {
                return operations.NodesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// list all the nodes that are connected to ours but that are not publicly
            /// reachable
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PathsapiV0NetworkP2pNonPublicgetresponses200contentapplicationJsonschemaitems>> NodesAsync(this IList operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NodesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list all the nodes that are available for p2p discovery and events
            /// propagation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<PathsapiV0NetworkP2pAvailablegetresponses200contentapplicationJsonschemaitems> Nodes1(this IList operations)
            {
                return operations.Nodes1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// list all the nodes that are available for p2p discovery and events
            /// propagation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PathsapiV0NetworkP2pAvailablegetresponses200contentapplicationJsonschemaitems>> Nodes1Async(this IList operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Nodes1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list all the nodes that have been quarantined
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<PathsapiV0NetworkP2pQuarantinedgetresponses200contentapplicationJsonschemaitems> Nodes2(this IList operations)
            {
                return operations.Nodes2Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// list all the nodes that have been quarantined
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PathsapiV0NetworkP2pQuarantinedgetresponses200contentapplicationJsonschemaitems>> Nodes2Async(this IList operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Nodes2WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list all the nodes that are selected for gossiping/peer discovery
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<PathsapiV0NetworkP2pViewgetresponses200contentapplicationJsonschemaitems> Nodes3(this IList operations)
            {
                return operations.Nodes3Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// list all the nodes that are selected for gossiping/peer discovery
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PathsapiV0NetworkP2pViewgetresponses200contentapplicationJsonschemaitems>> Nodes3Async(this IList operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Nodes3WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// list all the nodes that are selected for the given topic
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topic'>
            /// the topic name. Possible values include: 'blocks', 'fragments'
            /// </param>
            public static IList<PathsapiV0NetworkP2pViewTopicgetresponses200contentapplicationJsonschemaitems> Nodes4(this IList operations, string topic)
            {
                return operations.Nodes4Async(topic).GetAwaiter().GetResult();
            }

            /// <summary>
            /// list all the nodes that are selected for the given topic
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='topic'>
            /// the topic name. Possible values include: 'blocks', 'fragments'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PathsapiV0NetworkP2pViewTopicgetresponses200contentapplicationJsonschemaitems>> Nodes4Async(this IList operations, string topic, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Nodes4WithHttpMessagesAsync(topic, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
